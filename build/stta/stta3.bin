YSTEM\CurrentControlSet\Control\ProductOptions'
    $pfn = (Get-ItemProperty -Path $regPath -Name OSProductPfn).OSProductPfn
    $selectedEdition = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion").EditionID
    $productKey = $editions[$selectedEdition]["Key"]
    Write-Host "`nDetected PFN from registry: $pfn" -ForegroundColor Yellow
    Write-Host "Proceeding using this PFN." -ForegroundColor Cyan
} else {
    Write-Host "Invalid selection. Try again." -ForegroundColor Red
    exit
}
}

# === Step 1: Prompt Edition ===
$editionList = $editions.Keys | Sort-Object

if ($userInput -match '^\d+$') {
    $selectedEdition = $editionList[$userInput - 1]
} elseif ($aliases.ContainsKey($userInput.ToLower())) {
    $selectedEdition = $aliases[$userInput.ToLower()]
} elseif ($editionList -contains $userInput) {
    $selectedEdition = $userInput
} elseif ($userInput.ToLower() -eq 'current') {
    $regPath = 'HKLM:\SYSTEM\CurrentControlSet\Control\ProductOptions'
    $pfn = (Get-ItemProperty -Path $regPath -Name OSProductPfn).OSProductPfn
    $selectedEdition = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion").EditionID
    $productKey = $editions[$selectedEdition][$Key]
    Write-Host "`nDetected PFN from registry: $pfn" -ForegroundColor Yellow
    Write-Host "Proceeding using this PFN." -ForegroundColor Cyan
} else {
    Write-Host "Invalid selection. Try again." -ForegroundColor Red
    exit
}


# Assign PFN and product key now
$pfn = $editions[$selectedEdition].Pfn
$productKey = $editions[$selectedEdition].Key

Write-Host "`nSelected Edition: $selectedEdition"
Write-Host "Using PFN: $pfn"
Write-Host "Using RTM Key: $productKey"

# === Step 2: Fetch CAB installer ===
$cabURL = "https://download.microsoft.com/download/9/A/E/9AE69DD5-BA93-44E0-864E-180F5E700AB4/adk/Installers/14f4df8a2a7fc82a4f415cf6a341415d.cab"
Write-Host "`nFetching gatherosstate CAB installer..." -ForegroundColor Yellow
curl.exe -s -L -O $cabURL

# === Step 3: Prepare Files Directory ===
$filesPath = "C:\Files"
if (!(Test-Path $filesPath)) {
    $createDir = Read-Host "Create directory at C:\Files? (y/n)"
    if ($createDir -eq "y") {
        New-Item -Path $filesPath -ItemType Directory
}
    else {
        $filesPath = $PSScriptRoot
    }
}

# === Step 4: Extract Binary ===
$sourceFile = "14f4df8a2a7fc82a4f415cf6a341415d.cab"
$targetFile = "filf8377e82b29deadca67bc4858ed3fba9"
Write-Host "`nExpanding CAB contents..."
Expand $sourceFile -F:$targetFile $filesPath

# === Step 4.5: Rename and Apply Compatibility Mode ===
Remove-Item "$filesPath\gatherosstate.exe" -ErrorAction SilentlyContinue
Rename-Item "$filesPath\$targetFile" "$filesPath\gatherosstate.exe"

# Compatibility Mode: Windows XP SP3
Write-Host "`nSetting compatibility mode to Windows XP SP3..."
$regPath = "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers"
New-ItemProperty -Path $regPath -Name "$filesPath\gatherosstate.exe" -Value "WINXPSP3" -Force | Out-Null
Write-Host "Compatibility mode applied."

# === Step 5: Patch Binary ===
$patchNow = Read-Host "Patch gatherosstate.exe? (y/n)"
if ($patchNow -eq "y") {
    $bytes  = [System.IO.File]::ReadAllBytes("$filesPath\gatherosstate.exe")
    $bytes[320] = 0xf8; $bytes[321] = 0xfb; $bytes[322] = 0x05; $bytes[324] = 0x03
    $bytes[13672] = 0x25; $bytes[13674] = 0x73; $bytes[13676] = 0x3b; $bytes[13678] = 0x00
    $bytes[13680] = 0x00; $bytes[13682] = 0x00; $bytes[13684] = 0x00
    $bytes[32748] = 0xe9; $bytes[32749] = 0x9e; $bytes[32750] = 0x00; $bytes[32751] = 0x00; $bytes[32752] = 0x00
    $bytes[32894] = 0x8b; $bytes[32895] = 0x44; $bytes[32897] = 0x64; $bytes[32898] = 0x85; $bytes[32899] = 0xc0
    $bytes[32900] = 0x0f; $bytes[32901] = 0x85; $bytes[32902] = 0x1c; $bytes[32903] = 0x02; $bytes[32904] = 0x00
    $bytes[32906] = 0xe9; $bytes[32907] = 0x3c; $bytes[32908] = 0x01; $bytes[32909] = 0x00; $bytes[32910] = 0x00
    $bytes[32911] = 0x85; $bytes[32912] = 0xdb; $bytes[32913] = 0x75; $bytes[32914] = 0xeb
    $bytes[32915] = 0xe9; $bytes[32916] = 0x69; $bytes[32917] = 0xff; $bytes[32918] = 0xff; $bytes[32919] = 0xff
    $bytes[33094] = 0xe9; $bytes[33095] = 0x80; $bytes[33096] = 0x00; $bytes[33097] = 0x00; $bytes[33098] = 0x00
    $bytes[33449] = 0x64; $bytes[33576] = 0x8d; $bytes[33577] = 0x54; $bytes[33579] = 0x24
    $bytes[33580] = 0xe9; $bytes[33581] = 0x55; $bytes[33582] = 0x01; $bytes[33583] = 0x00; $bytes[33584] = 0x00
    $bytes[33978] = 0xc3; $bytes[34189] = 0x59; $bytes[34190] = 0xeb; $bytes[34191] = 0x28
    $bytes[34238] = 0xe9; $bytes[34239] = 0x4f; $bytes[34240] = 0x00; $bytes[34